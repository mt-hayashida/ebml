# Imports
import ebml;
version_info = ( 1 , 0 );



# Versions
V1 = VERSION_1 = 0x1;
V2 = VERSION_2 = 0x2;
V3 = VERSION_3 = 0x4;
V4 = VERSION_4 = 0x8;
VWEBM = VERSION_WEBM = 0x10;



# Create schema
__validator_not_0 = (lambda x: x != 0);
__validator_gt_0 = (lambda x: x > 0);
__validator_0_or_1 = (lambda x: x >= 0 and x <= 1);
__validator_1_thru_254 = (lambda x: x >= 1 and x <= 254);

schema = ebml.Schema();
schema.define(b"\x1A\x45\xDF\xA3", u"EBML", ebml.CONTAINER, 0, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x42\x86", u"EBMLVersion", ebml.UINT, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x42\xF7", u"EBMLReadVersion", ebml.UINT, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x42\xF2", u"EBMLMaxIDLength", ebml.UINT, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x42\xF3", u"EBMLMaxSizeLength", ebml.UINT, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x42\x82", u"DocType", ebml.STRING, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x42\x87", u"DocTypeVersion", ebml.UINT, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x42\x85", u"DocTypeReadVersion", ebml.UINT, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xEC", u"Void", ebml.BINARY, u"g", V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xBF", u"CRC32", ebml.BINARY, u"g", V1|V2|V3|V4, None, False);
schema.define(b"\x18\x53\x80\x67", u"Segment", ebml.CONTAINER, 0, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x11\x4D\x9B\x74", u"SeekHead", ebml.CONTAINER, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x4D\xBB", u"Seek", ebml.CONTAINER, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x53\xAB", u"SeekID", ebml.BINARY, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x53\xAC", u"SeekPosition", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x15\x49\xA9\x66", u"Info", ebml.CONTAINER, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x73\xA4", u"SegmentUID", ebml.BINARY, 2, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\x73\x84", u"SegmentFilename", ebml.UNICODE, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x3C\xB9\x23", u"PrevUID", ebml.BINARY, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x3C\x83\xAB", u"PrevFilename", ebml.UNICODE, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x3E\xB9\x23", u"NextUID", ebml.BINARY, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x3E\x83\xBB", u"NextFilename", ebml.UNICODE, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x44\x44", u"SegmentFamily", ebml.BINARY, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x69\x24", u"ChapterTranslate", ebml.CONTAINER, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x69\xFC", u"ChapterTranslateEditionUID", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x69\xBF", u"ChapterTranslateCodec", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x69\xA5", u"ChapterTranslateID", ebml.BINARY, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x2A\xD7\xB1", u"TimecodeScale", ebml.UINT, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x44\x89", u"Duration", ebml.FLOAT, 2, V1|V2|V3|V4|VWEBM, __validator_gt_0, False);
schema.define(b"\x44\x61", u"DateUTC", ebml.DATE, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x7B\xA9", u"Title", ebml.UNICODE, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x4D\x80", u"MuxingApp", ebml.UNICODE, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x57\x41", u"WritingApp", ebml.UNICODE, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x1F\x43\xB6\x75", u"Cluster", ebml.CONTAINER, 1, V1|V2|V3|V4|VWEBM, None, True);
schema.define(b"\xE7", u"Timecode", ebml.UINT, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x58\x54", u"SilentTracks", ebml.CONTAINER, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x58\xD7", u"SilentTrackNumber", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\xA7", u"Position", ebml.UINT, 2, V1|V2|V3|V4, None, False);
schema.define(b"\xAB", u"PrevSize", ebml.UINT, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xA3", u"SimpleBlock", ebml.BINARY, 2, V2|V3|V4|VWEBM, None, False);
schema.define(b"\xA0", u"BlockGroup", ebml.CONTAINER, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xA1", u"Block", ebml.BINARY, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x75\xA1", u"BlockAdditions", ebml.CONTAINER, 3, V1|V2|V3|V4, None, False);
schema.define(b"\xA6", u"BlockMore", ebml.CONTAINER, 4, V1|V2|V3|V4, None, False);
schema.define(b"\xEE", u"BlockAddID", ebml.UINT, 5, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\xA5", u"BlockAdditional", ebml.BINARY, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x9B", u"BlockDuration", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xFA", u"ReferencePriority", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\xFB", u"ReferenceBlock", ebml.INT, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xA4", u"CodecState", ebml.BINARY, 3, V2|V3|V4, None, False);
schema.define(b"\x75\xA2", u"DiscardPadding", ebml.INT, 3, V4|VWEBM, None, False);
schema.define(b"\x8E", u"Slices", ebml.CONTAINER, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xE8", u"TimeSlice", ebml.CONTAINER, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xCC", u"LaceNumber", ebml.UINT, 5, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x16\x54\xAE\x6B", u"Tracks", ebml.CONTAINER, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xAE", u"TrackEntry", ebml.CONTAINER, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xD7", u"TrackNumber", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x73\xC5", u"TrackUID", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x83", u"TrackType", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, __validator_1_thru_254, False);
schema.define(b"\xB9", u"FlagEnabled", ebml.UINT, 3, V2|V3|V4|VWEBM, __validator_0_or_1, False);
schema.define(b"\x88", u"FlagDefault", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, __validator_0_or_1, False);
schema.define(b"\x55\xAA", u"FlagForced", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, __validator_0_or_1, False);
schema.define(b"\x9C", u"FlagLacing", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, __validator_0_or_1, False);
schema.define(b"\x6D\xE7", u"MinCache", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x6D\xF8", u"MaxCache", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x23\xE3\x83", u"DefaultDuration", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x23\x4E\x7A", u"DefaultDecodedFieldDuration", ebml.UINT, 3, V4|VWEBM, __validator_not_0, False);
schema.define(b"\x23\x31\x4F", u"TrackTimecodeScale", ebml.FLOAT, 3, V1|V2|V3|V4, __validator_gt_0, False);
schema.define(b"\x55\xEE", u"MaxBlockAdditionID", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x53\x6E", u"Name", ebml.UNICODE, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x22\xB5\x9C", u"Language", ebml.STRING, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x86", u"CodecID", ebml.STRING, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x63\xA2", u"CodecPrivate", ebml.BINARY, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x25\x86\x88", u"CodecName", ebml.UNICODE, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x74\x46", u"AttachmentLink", ebml.UINT, 3, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\xAA", u"CodecDecodeAll", ebml.UINT, 3, V2|V3|V4, __validator_0_or_1, False);
schema.define(b"\x6F\xAB", u"TrackOverlay", ebml.UINT, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x56\xAA", u"CodecDelay", ebml.UINT, 3, V4|VWEBM, None, False);
schema.define(b"\x56\xBB", u"SeekPreRoll", ebml.UINT, 3, V4|VWEBM, None, False);
schema.define(b"\x66\x24", u"TrackTranslate", ebml.CONTAINER, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x66\xFC", u"TrackTranslateEditionUID", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x66\xBF", u"TrackTranslateCodec", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x66\xA5", u"TrackTranslateTrackID", ebml.BINARY, 4, V1|V2|V3|V4, None, False);
schema.define(b"\xE0", u"Video", ebml.CONTAINER, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x9A", u"FlagInterlaced", ebml.UINT, 4, V2|V3|V4|VWEBM, __validator_0_or_1, False);
schema.define(b"\x53\xB8", u"StereoMode", ebml.UINT, 4, V3|V4|VWEBM, None, False);
schema.define(b"\x53\xC0", u"AlphaMode", ebml.UINT, 4, V3|V4|VWEBM, None, False);
schema.define(b"\xB0", u"PixelWidth", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\xBA", u"PixelHeight", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x54\xAA", u"PixelCropBottom", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x54\xBB", u"PixelCropTop", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x54\xCC", u"PixelCropLeft", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x54\xDD", u"PixelCropRight", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x54\xB0", u"DisplayWidth", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x54\xBA", u"DisplayHeight", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x54\xB2", u"DisplayUnit", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x54\xB3", u"AspectRatioType", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x2E\xB5\x24", u"ColourSpace", ebml.BINARY, 4, V1|V2|V3|V4, None, False);
schema.define(b"\xE1", u"Audio", ebml.CONTAINER, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xB5", u"SamplingFrequency", ebml.FLOAT, 4, V1|V2|V3|V4|VWEBM, __validator_gt_0, False);
schema.define(b"\x78\xB5", u"OutputSamplingFrequency", ebml.FLOAT, 4, V1|V2|V3|V4|VWEBM, __validator_gt_0, False);
schema.define(b"\x9F", u"Channels", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x62\x64", u"BitDepth", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\xE2", u"TrackOperation", ebml.CONTAINER, 3, V3|V4, None, False);
schema.define(b"\xE3", u"TrackCombinePlanes", ebml.CONTAINER, 4, V3|V4, None, False);
schema.define(b"\xE4", u"TrackPlane", ebml.CONTAINER, 5, V3|V4, None, False);
schema.define(b"\xE5", u"TrackPlaneUID", ebml.UINT, 6, V3|V4, __validator_not_0, False);
schema.define(b"\xE6", u"TrackPlaneType", ebml.UINT, 6, V3|V4, None, False);
schema.define(b"\xE9", u"TrackJoinBlocks", ebml.CONTAINER, 4, V3|V4, None, False);
schema.define(b"\xED", u"TrackJoinUID", ebml.UINT, 5, V3|V4, __validator_not_0, False);
schema.define(b"\x6D\x80", u"ContentEncodings", ebml.CONTAINER, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x62\x40", u"ContentEncoding", ebml.CONTAINER, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x50\x31", u"ContentEncodingOrder", ebml.UINT, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x50\x32", u"ContentEncodingScope", ebml.UINT, 5, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\x50\x33", u"ContentEncodingType", ebml.UINT, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x50\x34", u"ContentCompression", ebml.CONTAINER, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x42\x54", u"ContentCompAlgo", ebml.UINT, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x42\x55", u"ContentCompSettings", ebml.BINARY, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x50\x35", u"ContentEncryption", ebml.CONTAINER, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x47\xE1", u"ContentEncAlgo", ebml.UINT, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x47\xE2", u"ContentEncKeyID", ebml.BINARY, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x47\xE3", u"ContentSignature", ebml.BINARY, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x47\xE4", u"ContentSigKeyID", ebml.BINARY, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x47\xE5", u"ContentSigAlgo", ebml.UINT, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x47\xE6", u"ContentSigHashAlgo", ebml.UINT, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x1C\x53\xBB\x6B", u"Cues", ebml.CONTAINER, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xBB", u"CuePoint", ebml.CONTAINER, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xB3", u"CueTime", ebml.UINT, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xB7", u"CueTrackPositions", ebml.CONTAINER, 3, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xF7", u"CueTrack", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\xF1", u"CueClusterPosition", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\xF0", u"CueRelativePosition", ebml.UINT, 4, V4, None, False);
schema.define(b"\xB2", u"CueDuration", ebml.UINT, 4, V4, None, False);
schema.define(b"\x53\x78", u"CueBlockNumber", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\xEA", u"CueCodecState", ebml.UINT, 4, V2|V3|V4, None, False);
schema.define(b"\xDB", u"CueReference", ebml.CONTAINER, 4, V2|V3|V4, None, False);
schema.define(b"\x96", u"CueRefTime", ebml.UINT, 5, V2|V3|V4, None, False);
schema.define(b"\x19\x41\xA4\x69", u"Attachments", ebml.CONTAINER, 1, V1|V2|V3|V4, None, False);
schema.define(b"\x61\xA7", u"AttachedFile", ebml.CONTAINER, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x46\x7E", u"FileDescription", ebml.UNICODE, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x46\x6E", u"FileName", ebml.UNICODE, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x46\x60", u"FileMimeType", ebml.STRING, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x46\x5C", u"FileData", ebml.BINARY, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x46\xAE", u"FileUID", ebml.UINT, 3, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\x10\x43\xA7\x70", u"Chapters", ebml.CONTAINER, 1, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x45\xB9", u"EditionEntry", ebml.CONTAINER, 2, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x45\xBC", u"EditionUID", ebml.UINT, 3, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\x45\xBD", u"EditionFlagHidden", ebml.UINT, 3, V1|V2|V3|V4, __validator_0_or_1, False);
schema.define(b"\x45\xDB", u"EditionFlagDefault", ebml.UINT, 3, V1|V2|V3|V4, __validator_0_or_1, False);
schema.define(b"\x45\xDD", u"EditionFlagOrdered", ebml.UINT, 3, V1|V2|V3|V4, __validator_0_or_1, False);
schema.define(b"\xB6", u"ChapterAtom", ebml.CONTAINER, u"3+", V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x73\xC4", u"ChapterUID", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, __validator_not_0, False);
schema.define(b"\x56\x54", u"ChapterStringUID", ebml.UNICODE, 4, V3|V4|VWEBM, None, False);
schema.define(b"\x91", u"ChapterTimeStart", ebml.UINT, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x92", u"ChapterTimeEnd", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x98", u"ChapterFlagHidden", ebml.UINT, 4, V1|V2|V3|V4, __validator_0_or_1, False);
schema.define(b"\x45\x98", u"ChapterFlagEnabled", ebml.UINT, 4, V1|V2|V3|V4, __validator_0_or_1, False);
schema.define(b"\x6E\x67", u"ChapterSegmentUID", ebml.BINARY, 4, V1|V2|V3|V4, __validator_gt_0, False);
schema.define(b"\x6E\xBC", u"ChapterSegmentEditionUID", ebml.UINT, 4, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\x63\xC3", u"ChapterPhysicalEquiv", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x8F", u"ChapterTrack", ebml.CONTAINER, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x89", u"ChapterTrackNumber", ebml.UINT, 5, V1|V2|V3|V4, __validator_not_0, False);
schema.define(b"\x80", u"ChapterDisplay", ebml.CONTAINER, 4, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x85", u"ChapString", ebml.UNICODE, 5, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x43\x7C", u"ChapLanguage", ebml.STRING, 5, V1|V2|V3|V4|VWEBM, None, False);
schema.define(b"\x43\x7E", u"ChapCountry", ebml.STRING, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x69\x44", u"ChapProcess", ebml.CONTAINER, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x69\x55", u"ChapProcessCodecID", ebml.UINT, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x45\x0D", u"ChapProcessPrivate", ebml.BINARY, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x69\x11", u"ChapProcessCommand", ebml.CONTAINER, 5, V1|V2|V3|V4, None, False);
schema.define(b"\x69\x22", u"ChapProcessTime", ebml.UINT, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x69\x33", u"ChapProcessData", ebml.BINARY, 6, V1|V2|V3|V4, None, False);
schema.define(b"\x12\x54\xC3\x67", u"Tags", ebml.CONTAINER, 1, V1|V2|V3|V4, None, False);
schema.define(b"\x73\x73", u"Tag", ebml.CONTAINER, 2, V1|V2|V3|V4, None, False);
schema.define(b"\x63\xC0", u"Targets", ebml.CONTAINER, 3, V1|V2|V3|V4, None, False);
schema.define(b"\x68\xCA", u"TargetTypeValue", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x63\xCA", u"TargetType", ebml.STRING, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x63\xC5", u"TagTrackUID", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x63\xC9", u"TagEditionUID", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x63\xC4", u"TagChapterUID", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x63\xC6", u"TagAttachmentUID", ebml.UINT, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x67\xC8", u"SimpleTag", ebml.CONTAINER, u"3+", V1|V2|V3|V4, None, False);
schema.define(b"\x45\xA3", u"TagName", ebml.UNICODE, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x44\x7A", u"TagLanguage", ebml.STRING, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x44\x84", u"TagDefault", ebml.UINT, 4, V1|V2|V3|V4, __validator_0_or_1, False);
schema.define(b"\x44\x87", u"TagString", ebml.UNICODE, 4, V1|V2|V3|V4, None, False);
schema.define(b"\x44\x85", u"TagBinary", ebml.BINARY, 4, V1|V2|V3|V4, None, False);
